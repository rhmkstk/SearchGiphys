{"version":3,"sources":["components/loading/loading.js","components/content/content.js","components/copy/copy.js","App.js","serviceWorker.js","index.js"],"names":["Search","Content","title","src","alt","Copy","className","App","API_KEY","useState","gifts","setGifts","search","setSearch","isData","setIsData","isCopied","setIsCopied","useEffect","fetch","then","res","json","data","makeSearch","console","log","type","placeholder","value","onChange","e","target","onKeyUp","key","disabled","onClick","map","id","textField","document","createElement","innerText","images","downsized_large","url","body","appendChild","select","execCommand","style","display","setTimeout","copyUrl","fixed_height","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAWeA,EARA,WACb,OACE,6BACE,wDCGSC,EANC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAChB,OACE,yBAAKC,IAAKD,EAAOE,IAAI,UCMVC,EARF,WACX,OACE,6BACE,yBAAKC,UAAU,UAAf,kB,MCwESC,MAvEf,WAEE,IAAMC,EAAU,mCAFH,EAGaC,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIeF,mBAAS,IAJxB,mBAING,EAJM,KAIEC,EAJF,OAKcJ,oBAAS,GALvB,mBAKNK,EALM,KAKCC,EALD,OAMkBN,mBAAS,IAN3B,mBAMNO,EANM,KAMGC,EANH,KASbC,qBAAU,WACRC,MAAM,iDAAD,OAAkDX,IACpDY,MAAK,SAAAC,GAAQ,OAAOA,EAAIC,UACxBF,MAAK,SAAAC,GAAQV,EAASU,EAAIE,SAC1BH,KAAKL,GAAU,MAClB,IAEF,IAGMS,EAAa,WACjBT,GAAU,GACVI,MAAM,yCAAD,OAA0CP,EAA1C,oBAA4DJ,IAC9DY,MAAK,SAAAC,GAAQ,OAAOA,EAAIC,UACxBF,MAAK,SAAAC,GAAQV,EAASU,EAAIE,MAAOE,QAAQC,IAAIL,EAAIE,SACjDH,KAAKP,EAAU,KACfO,KAAKL,GAAU,KAsBpB,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,UACb,2BAAOqB,KAAK,OAAOC,YAAY,qBAAqBC,MAAOjB,EACzDkB,SAnCU,SAAAC,GAChBlB,EAAUkB,EAAEC,OAAOH,QAkCQI,QAAU,SAAAF,GAAkB,UAAVA,EAAEG,IAAmBV,IAAeC,QAAQC,IAAI,SACzF,4BAAQS,UAAWvB,EAAQwB,QAASZ,GAApC,OACA,4BAAQW,UAAWvB,EAAQwB,QA1BX,WACpBrB,GAAU,GACVI,MAAM,6CAAD,OAA8CP,EAA9C,oBAAgEJ,IAClEY,MAAK,SAAAC,GAAQ,OAAOA,EAAIC,UACxBF,MAAK,SAAAC,GAAQV,EAASU,EAAIE,MAAQE,QAAQC,IAAIL,EAAIE,SAClDH,KAAKP,EAAU,KACfO,KAAKL,GAAU,MAoBd,YAEDD,GAAU,kBAAC,EAAD,MACX,yBAAKR,UAAU,WAEXI,EAAM2B,KAAI,SAACN,GAAD,OACR,yBAAKzB,UAAU,aAAa4B,IAAKH,EAAEO,GAAIF,QAAS,YAxB1C,SAACL,GACfd,EAAYc,EAAEO,IACd,IAAIC,EAAYC,SAASC,cAAc,YACvCF,EAAUG,UAAYX,EAAEY,OAAOC,gBAAgBC,IAC/CL,SAASM,KAAKC,YAAYR,GAC1BA,EAAUS,SACVR,SAASS,YAAY,QACrBV,EAAUW,MAAMC,QAAU,OAC1BC,YAAW,WACTnC,EAAY,MACZ,MAc6DoC,CAAQtB,KAC5DA,EAAEO,KAAOtB,GAAY,kBAAC,EAAD,MACtB,kBAAC,EAAD,CAASd,MAAO6B,EAAEY,OAAOW,aAAaT,IAAKX,IAAKH,EAAEO,YCxD5CiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.05e0ee97.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Search = () => {\n  return(\n    <div>\n      <div>Data YÃ¼kleniyor...</div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from 'react';\n\n\nconst Content = ({title}) => {\n  return(\n    <img src={title} alt=\"gift\"/>\n  );\n}\n\nexport default Content;\n","import React from 'react';\n\n\nconst Copy = () => {\n  return(\n    <div>\n      <div className=\"copied\">URL Copied !</div>\n    </div>\n  );\n}\n\nexport default Copy;\n","import React,{useEffect,useState} from 'react';\nimport Loading from './components/loading/loading'\nimport Content from './components/content/content'\nimport Copy from './components/copy/copy'\n\nimport './App.css';\n\nfunction App() {\n\n  const API_KEY = \"hPM2ynPSsLyIYHlWX8gHGC6IPOnsf0jS\";\n  const [gifts, setGifts] = useState([]);\n  const [search, setSearch] = useState('');\n  const [isData,setIsData] = useState(true);\n  const [isCopied,setIsCopied] = useState('');\n\n\n  useEffect(() => {\n    fetch(`http://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}`)\n      .then(res => {return res.json()})\n      .then(res => {setGifts(res.data)})\n      .then(setIsData(false))\n  },[]);\n\n  const getSearch = e => {\n    setSearch(e.target.value);\n  }\n  const makeSearch = () => {\n    setIsData(true);\n    fetch(`http://api.giphy.com/v1/gifs/search?q=${search}&api_key=${API_KEY}`)\n      .then(res => {return res.json()})\n      .then(res => {setGifts(res.data); console.log(res.data)})\n      .then(setSearch(''))\n      .then(setIsData(false))\n  }\n  const stickerSearch = () => {\n    setIsData(true);\n    fetch(`http://api.giphy.com/v1/stickers/search?q=${search}&api_key=${API_KEY}`)\n      .then(res => {return res.json()})\n      .then(res => {setGifts(res.data);  console.log(res.data)})\n      .then(setSearch(''))\n      .then(setIsData(false))\n    }\n  const copyUrl = (e) => {\n    setIsCopied(e.id);\n    let textField = document.createElement('textarea');\n    textField.innerText = e.images.downsized_large.url;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.style.display = 'none';\n    setTimeout(() => {\n      setIsCopied('');\n    },1100)\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"search\">\n        <input type=\"text\" placeholder=\"Type to search . .\" value={search} \n          onChange={getSearch} onKeyUp= {e => { (e.key === 'Enter') ? makeSearch() : console.log(\"..\") } }/>\n        <button disabled={!search} onClick={makeSearch}>Gif</button>\n        <button disabled={!search} onClick={stickerSearch}>Sticker</button>\n      </div>\n      {isData && <Loading/>}\n      <div className=\"content\"> \n        {\n          gifts.map((e) => \n            <div className=\"imgWrapper\" key={e.id} onClick={() => {copyUrl(e)}}>\n              {e.id === isCopied && <Copy/>} \n              <Content title={e.images.fixed_height.url} key={e.id} />\n            </div>\n          )\n        } \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}